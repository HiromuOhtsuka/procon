import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class Main {
  static final int INF = Integer.MAX_VALUE / 2;
  static int h, w, t;
  static char[][] table;

  public static void main(String[] args){
    Scanner sc = new Scanner(System.in);

    h = sc.nextInt(); w = sc.nextInt(); t = sc.nextInt();
    table = new char[h][w];
    int sx = -1, sy = -1, gx = -1, gy = -1;
    for(int i = 0; i < h; i++){
      String line = sc.next();
      for(int j = 0; j < w; j++){
        char ch = line.charAt(j);
        table[i][j] = ch;
        if(ch == 'S'){
          sx = j; sy = i;
        }
        if(ch == 'G'){
          gx = j; gy = i;
        }
      }
    }

    int[][] max = new int[h][w];
    Queue< Pair > que = new LinkedList< Pair >();
    que.offer(new Pair(sx, sy, 0, 0));
    int[] dx = new int[]{0, -1, 0, 1}, dy = new int[]{-1, 0, 1, 0};
    //boolean[][] visited = new boolean[h][w];
    while(!que.isEmpty()){
      Pair p = que.poll();
      //visited[p.y][p.x] = true;
      for(int i = 0; i < 4; i++){
        int nx = p.x + dx[i], ny = p.y + dy[i];
        if(0 <= nx && nx < w && 0 <= ny && ny < h &&
          /*!visited[ny][nx]*/){
          int n = p.n;
          if(table[ny][nx] == '#' && max[ny][nx] > ((t - ((p.d + 1) - (p.n + 1))) / (p.n + 1))){
            ++n;
            max[ny][nx] = Math.max(max[ny][nx], (t - ((p.d + 1) - n)) / n);
            que.offer(new Pair(nx, ny, p.d + 1, n));
          }
          else{
            max[ny][nx] = Math.max(max[ny][nx], max[p.y][p.x]);
          }
          que.offer(new Pair(nx, ny, p.d + 1, n));
        }
      }
    }

    System.out.println(max[gy][gx]);
  }

  static class Pair {
    int x, y, d, n;

    Pair(int x, int y, int d, int n){
      this.x = x; this.y = y;
      this.d = d; this.n = n;
    }
  }
}
